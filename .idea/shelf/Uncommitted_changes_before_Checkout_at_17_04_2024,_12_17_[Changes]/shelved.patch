Index: index.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n<body>\n    \n</body>\n<script src=\"index.js\"></script>\n</html>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/index.html b/index.html
--- a/index.html	
+++ b/index.html	
@@ -9,4 +9,5 @@
     
 </body>
 <script src="index.js"></script>
+<script src="jo.js"></script>
 </html>
\ No newline at end of file
Index: HW21.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// Базовый уровень\n// Задача 1.\n// Выведи все элементы массива в консоль с помощью метода forEach .\n//     const fibonacci = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987]\n// Реализуйте решение двумя способами, используя function declaration & arrow\n// function\nconst fibonacci = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987];\nconst allEllements = (numbers) => {\n    return numbers.forEach ((number) => number);\n};\nconsole.log(allEllements(fibonacci));\n\nfunction allEllements1(numbers) {\n    return numbers.forEach ((number) => number);\n};\n\nconsole.log(allEllements1(fibonacci));\n\n\n// Задача 2.\n// Используя метод map создайте новый массив, на основе массива users , в\n// котором каждый элемент массива будет содержать строку вида:\n//     ['member 1: Darya', 'member 2: Masha', ... etc] .\n//         const users = ['Darya', 'Masha', 'Denis', 'Vitaliy', 'Polina', 'Anton']\n// Реализуйте решение двумя способами, используя function declaration & arrow\n// function.\nconst users = ['Darya', 'Masha', 'Denis', 'Vitaliy', 'Polina', 'Anton'];\nconst newArrayUsers = (names) => {\n    return names.map ((name , index) => (`member ${++index}: ${name}`))\n};\nconsole.log(newArrayUsers(users));\n\nfunction newArrayUsers1(names){\n    return names.map ((name , index) => (`member ${++index}: ${name}`))\n};\nconsole.log(newArrayUsers1(users));\n\n// Задача 3.\n// С помощью метода filter создайте новый массив в котором не будет\n// отрицательных чисел.\n//     const numbers = [7, -4, 32, -90, 54, 32, -21]\n// Реализуйте решение двумя способами, используя function declaration & arrow\n// function.\nconst numbers = [7, -4, 32, -90, 54, 32, -21];\n\nconst numbersFilter = (numbers) => {\n    return numbers.filter ((number) => (number >= 0))\n};\nconsole.log(numbersFilter(numbers));\n\nfunction numbersFilter1(numbers){\n    return numbers.filter ((number) => (number >= 0))\n};\nconsole.log(numbersFilter1(numbers));\n\n\n// Задача 4.\n// Используя метод reduce получите сумму всех чисел массива.\n//     const fibonacci = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987]\n//Реализуйте решение двумя способами, используя function declaration & arrow\n// function.\nconst fibonacci1 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987];\nconst sumNumbers = (numbers) => {\n  return numbers.reduce ((result, number) =>  result + number, 0 )\n};\nconsole.log(sumNumbers(fibonacci1));\n\nfunction sumNumbers1(numbers){\n    return numbers.reduce ((result, number) =>  result + number, 0 )\n}\nconsole.log(sumNumbers1(fibonacci1));\n\n\n// Задача 5.\n// Используя метод find найдите в массиве первое четное число.\n//     const numbers = [5, 9, 13, 24, 54, 10, 13, 99, 1, 5]\n// Реализуйте решение двумя способами, используя function declaration & arrow\n// function.\n\nconst numbers1 = [5, 9, 13, 24, 54, 10, 13, 99, 1, 5];\nconst findNumbers = (numbers) => {\n   return numbers.find((number) => number % 2 === 0)\n};\n\nconsole.log(findNumbers(numbers1));\n\nfunction findNumbers1 (numbers){\n    return numbers.find((number) => number % 2 === 0)\n}\nconsole.log(findNumbers1(numbers1));\n\n\n// Продвинутый уровень\n// Задача 1.\n// Написать функцию конструктор Student\n// В каждом объекте студента должны быть поля salary , rate , name\n// Внутри объекта также должен быть метод который на основе рейтинга\n// возвращает сумму возможного кредита.\n//     На основе функции создать минимум 5 студентов и имя каждого студента\n// должно соответствовать имени студента из вашей группы.\n//     Создать массив students и поместить в него студентов.\n//     Написать функцию, которая принимает массив студентов. И вычисляет\n// общую сумму кредитов которую можно выдать группе.\n//     rate имеет 4 категории A B C D:\n//     A - отличный рейтинг и мы можем дать человеку кредит как 12 его зарплат\n// B - хороший рейтинг и мы можем дать человеку кредит как 9 его зарплат\n// C - неплохой рейтинг и мы можем дать человеку кредит как 6 его зарплат\n// D - плохой рейтинг и мы не можем дать кредит\n\n\n// Задача 2.\n// Тролли атакуют наш раздел с комментариями!!!\n//     Единственный способ справиться с этой ситуацией - удалить все гласные из\n// комментариев троллей, нейтрализуя угрозу.\n//Ваша задача - написать функцию, которая принимает строку и возвращает\n// новую строку с удаленными гласными.\n//     Например, строка «This website is for losers LOL!» станет «Ths wbst s fr lsrs LL!».\n// Примечание: для этой задачи y не считается гласной.\n\n\nconst word = \"This website is for losers LOL!\";\nconst againstTrols = (string) => {\n    return string.replace(/[aeiou]/ig, '');\n}\nconsole.log(againstTrols(word));\n\n\n//     Задача 3.\n// Нет истории, нет теории\n// В приведенных ниже примерах показано, как написать функцию:\n//     accum('abcd') // -> 'A-Bb-Ccc-Dddd'\n// accum('RqaEzty') // -> 'R-Qq-Aaa-Eeee-Zzzzz-Tttttt-Yyyyyyy'\n// accum('cwAt') // -> 'C-Ww-Aaa-Tttt'\n// Параметр — это строка, которая включает только буквы от a...z и A...Z.\nconst someValue = 'abcd';\nconst accumFn = ( chars) => {\n    return chars.split('').map((char, index) => {\n        console.log(char.repeat(index));\n        return char.toUpperCase() + char.toLowerCase().repeat(index);\n\n    }).join('-');\n\n}\nconsole.log(accumFn(someValue));\n\n\n//     Задача 4.\n// Самый высокий и самый низкий\n// В этом небольшом задании вам дается строка чисел, разделенных пробелами,\n//     и вы должны возвращать наибольшее и наименьшее число.\n// highAndLow('1 2 3 4 5') // return '5 1'\n// highAndLow('1 2 -3 4 5') // return '5 -3'\n// highAndLow('1 9 3 4 -5') // return '9 -5'\n// Строка вывода должна состоять из двух чисел, разделенных одним пробелом,\n//     при этом наибольшее число должно быть первым.\n\n\nconst myString = '1 2 3 4 5';\nconst highAndLow = (values) => {\nconst numbers = values.split(\" \").map(Number)\n    const maxNumber = Math.max(...numbers)\n    const minNumber = Math.min(...numbers)\n    return `${maxNumber} ${minNumber}`\n}\nconsole.log(highAndLow(myString));\n\n\n//     Задача 5.\n// Изограммы\n// Изограмма - это слово, в котором нет повторяющихся букв, последовательных\n// или непоследовательных. Реализуйте функцию, которая определяет, является\n// ли строка, содержащая только буквы, изограммой. Предположим, что пустая\n// строка является изограммой. Регистр букв мы игнорируем.\n// isIsogram(\"Dermatoglyphics\") == true\n// isIsogram(\"aba\") == false\n// isIsogram(\"moOse\") == false // -- ignore letter case\n\n\n\n//  НАШЛА РЕШЕНИЕ В ИНТЕРНЕТЕ, НО ВООБЩЕ НЕ МОГУ ПОНЯТЬ КАК ТАК ПОЛУЧИЛОСЬ, ПОЭТОМУ ПОНИМАНИЯ ТУТ НЕТ !!!!\nconst isIsogram= (str) => {\n    const lowerCaseStr = str.toLowerCase();\n    const letters = [];\n\n    for (let char of lowerCaseStr) {\n        if (letters[char]) {\n            return false;\n        }\n        letters[char] = true;\n    }\n\n    return true;\n};\nconsole.log(isIsogram(\"moOse\"));\nconsole.log(isIsogram(\"Dermatoglyphics\"));\nconsole.log(isIsogram(\"aba\"));\n\n\n// Задача 6.\n// Считаем коды символов\n// Учитывая строку, превратите каждый символ в его код символа ASCII и\n// соедините их вместе, чтобы создать число. Поместите результат в\n// переменную total1 .\n//     Затем замените все числа 7 на число 1 и назовите это число total2 .\n//     После верните разницу между суммой цифр total1 и total2 .\n// 'ABC' --> 'A' = 65, 'B' = 66, 'C' = 67 --> 656667\n// const  convertToASCII= (strCodes) =>  {\n//     const result = [];\n//     for (let i = 0; i < strCodes.length; i++) {\n//         const charCode = strCodes.charCodeAt(i)\n//         result.push(charCode);\n//     }\n//     return result;\n// }\n// console.log(convertToASCII('ABC'));\n\n    const calculateDifference = (str) => {\n    const splitStr = str.split('');\n    const total1 = splitStr.map(char => char.charCodeAt(0)).join('');\n    const total2 = total1.replace(/7/g, '1');\n\n\n    const total1toSplited = total1.split('');\n        console.log(total1toSplited)\n    const total2toSplited = total2.split('');\n\n\n    const sumTotal1 = total1toSplited.reduce((result, item) => result + parseInt(item) ,  0);\n        console.log(sumTotal1)\n\n    const sumTotal2 = total2toSplited.reduce((result, item) => result + parseInt(item),   0);\n        console.log(sumTotal2)\n\n    return sumTotal1 - sumTotal2;\n}\n\nconsole.log(calculateDifference('ABC'));\n\n\n// Задача 7.\n// Дубликаты\n// Цель этого упражнения — преобразовать строку в новую строку, где каждый\n// символ в новой строке равен ( , если этот символ появляется только один раз в\n// исходной строке, или ) , если этот символ встречается более одного раза в\n// исходной строке. Игнорируйте использование заглавных букв при определении\n// дубликата символа.\n// 'din' // => '((('\n// \"recede\" // => '()()()'\n// 'Success' // => ')())())'\n// '(( @' // => '))((\"'\n\n//  НАШЛА РЕШЕНИЕ В ИНТЕРНЕТЕ, ВООБЩЕ НЕ ПОНИМАЮ!!!\nfunction duplicateEncode(word) {\n    // Приводим все символы к нижнему регистру\n    const lowerCaseWord = word.toLowerCase();\n\n    // Создаем объект для подсчета встреч каждого символа\n    const charCount = lowerCaseWord.split('').reduce((acc, char) => {\n        acc[char] = (acc[char] || 0) + 1;\n        return acc;\n    }, {});\n\n    // Создаем новую строку на основе подсчета встреч каждого символа\n    let result = '';\n    for (let char of lowerCaseWord) {\n        // Если символ встречается более одного раза, добавляем ) в результат, иначе (\n        result += charCount[char] > 1 ? ')' : '(';\n    }\n\n    return result;\n}\n\nconsole.log(duplicateEncode('din'));      // '((('\nconsole.log(duplicateEncode('recede'));   // '()()()'\nconsole.log(duplicateEncode('Success'));  // ')())())'\nconsole.log(duplicateEncode('(( @'));     // '))((\"'\n
===================================================================
diff --git a/HW21.js b/HW21.js
--- a/HW21.js	
+++ b/HW21.js	
@@ -262,7 +262,7 @@
 
     // Создаем новую строку на основе подсчета встреч каждого символа
     let result = '';
-    for (let char of lowerCaseWord) {
+    for ( char of lowerCaseWord) {
         // Если символ встречается более одного раза, добавляем ) в результат, иначе (
         result += charCount[char] > 1 ? ')' : '(';
     }
@@ -274,3 +274,4 @@
 console.log(duplicateEncode('recede'));   // '()()()'
 console.log(duplicateEncode('Success'));  // ')())())'
 console.log(duplicateEncode('(( @'));     // '))(("'
+
